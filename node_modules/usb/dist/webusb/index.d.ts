/// <reference types="w3c-web-usb" />
import { TypedEventTarget } from './typed-event-target';
/**
 * USB Options
 */
export interface USBOptions {
    /**
     * A `device found` callback function to allow the user to select a device
     */
    devicesFound?: (devices: Array<USBDevice>) => Promise<USBDevice | void>;
}
/**
 * @hidden
 */
export declare type USBEvents = {
    /**
     * USBDevice connected event
     */
    connect: USBConnectionEvent;
    /**
     * USBDevice disconnected event
     */
    disconnect: USBConnectionEvent;
};
export declare class WebUSB extends TypedEventTarget<USBEvents> implements USB {
    private options;
    private allowedDevices;
    constructor(options?: USBOptions);
    set onconnect(listener: (event: USBConnectionEvent) => void);
    set ondisconnect(listener: (event: USBConnectionEvent) => void);
    /**
     * Requests a single Web USB device
     * @param options The options to use when scanning
     * @returns Promise containing the selected device
     */
    requestDevice(options?: USBDeviceRequestOptions): Promise<USBDevice>;
    /**
     * Gets all allowed Web USB devices which are connected
     * @returns Promise containing an array of devices
     */
    getDevices(): Promise<USBDevice[]>;
    private loadDevices;
    private preFilterDevices;
    private isSameDevice;
    private replaceAllowedDevice;
    private filterDevice;
}
